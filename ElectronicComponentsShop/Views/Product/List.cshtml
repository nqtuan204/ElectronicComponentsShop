@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    string[] values = new string[] { null, "views_desc", "date_desc", "date_asc", "name_asc", "name_desc", "score_desc", "price_desc", "price_asc" };
    string[] displays = new string[] { "Mặc định", "Xem nhiều", "Mới", "Cũ", "A->Z", "Z->A", "Đánh giá", "Giá cao", "Giá thấp" };
    int[] pageSizes = { 9, 15, 18, 24 };
    var categoryIds = String.IsNullOrEmpty(Model.Filter.Categories) ? new List<int>() : Model.Filter.Categories.Split(",").Select(c => int.Parse(c)).ToList();
}

@model ProductListVM
<!-- ASIDE -->
<div id="aside" class="col-md-3">
    <!-- aside Widget -->
    <div class="aside">
        <h3 class="aside-title">Danh mục</h3>
        @foreach (var Category in Model.Categories)
        {
            <div class="checkbox-filter">
                <div class="input-checkbox">
                    <input type="checkbox" id="category-@Category.Id" name="categories" checked="@(categoryIds.Contains(Category.Id))" value="@Category.Id">
                    <label for="category-@Category.Id">
                        <span></span>
                        @Category.Name
                        <small>(@Category.NumberOfProducts)</small>
                    </label>
                </div>
            </div>
        }
    </div>
    <!-- /aside Widget -->
    <!-- aside Widget -->
    <div class="aside">
        <h3 class="aside-title">Khoảng giá</h3>
        <div class="price-filter">
            <div class="input-number price-min">
                <input id="price-min" type="number" name="minPrice">
                <span class="qty-up">+</span>
                <span class="qty-down">-</span>
            </div>
            <span>-</span>
            <div class="input-number price-max">
                <input id="price-max" type="number" name="maxPrice">
                <span class="qty-up">+</span>
                <span class="qty-down">-</span>
            </div>
        </div>
    </div>
    <div class="header-search">
        <form>
            <button type="button" onclick="apply()" class="search-btn">Áp dụng</button>
        </form>
    </div>
    <!-- /aside Widget -->
</div>

<!-- /ASIDE -->
<!-- STORE -->
<div id="store" class="col-md-9">
    <!-- store top filter -->
    <div class="store-filter clearfix">
        <div class="store-sort">
            <label>
                Sắp xếp:
                <select class="input-select" id="sort-selection">
                    @for (int i = 0; i < values.Length; i++)
                    {
                        <option value="@values[i]" selected="@(values[i]==Model.SortBy)">@displays[i]</option>
                    }
                </select>
            </label>

            <label>
                Hiển thị:
                <select class="input-select" id="pageSize-selection">
                    @foreach (var size in pageSizes)
                    {
                        <option value="@size" selected="@(size==Model.PageSize)">@size</option>
                    }
                </select>
            </label>
        </div>
        <ul class="store-grid">
            <li class="active"><i class="fa fa-th"></i></li>
            <li><a href="#"><i class="fa fa-th-list"></i></a></li>
        </ul>
    </div>
    <!-- /store top filter -->
    <div id="product-grid-wrapper">

    </div>
    <div id="paginator-wrapper">

    </div>
</div>
<!-- /STORE -->

<script>
    getPaginatorPartial('@Model.Page', '@Model.PageSize');

    async function getPaginatorPartial(page, pageSize) {
        let total = await getProductGridPartial(page);
        fetch(`/Paginator/GetPaginatorPartial?page=${page}&pageSize=${pageSize}&total=${total}`).then(re => re.text()).then(data => document.getElementById('paginator-wrapper').innerHTML = data);
        scroll({ top: 0, left: 0, behavior: 'smooth' });
    }

    function prefix(path) {
        return path.includes('?') ? '&' : '?';
    }

    async function getProductGridPartial(page) {
        let path = getPath();
        let qs = getQueryString();
        if (page > 1)
            qs = qs + prefix(qs) + `page=${page}`;
        window.history.pushState({}, document.title, path + qs);
        fetch(`/Product/GetProductGridPartial${qs}`).then(re => re.text()).then(data => document.getElementById('product-grid-wrapper').innerHTML = data);
        let total = fetch(`/Product/Count${qs}`).then(re => re.json()).then(data => parseInt(data));
        getTotal = async (value) => value;
        return await getTotal(total);
    }

    function getPath() {
        let keyword = document.getElementById('search-box').value;
        if (keyword == null || keyword == '' || keyword == undefined)
            return '/Product/List';
        return '/Product/Search';
    }

    function getQueryString() {
        let qs = '';
        let params = getParams();
        for (let param of params) {
            if (param.value != '' && param.value != null) {
                qs += `${prefix(qs)}${param.name}=${param.value}`;
            }
        }
        let value = document.getElementById('pageSize-selection').value;
        if (value != '9')
            qs += `${prefix(qs)}pageSize=${value}`;
        return qs;
    }

    function getParams() {
        let params = [];
        params.push({ name: 'keyword', value: document.getElementById('search-box').value });
        params.push({ name: 'categories', value: getCategories() });
        params.push({ name: 'minPrice', value: document.getElementById('price-min').value });
        params.push({ name: 'maxPrice', value: document.getElementById('price-max').value });
        params.push({ name: 'sortBy', value: document.getElementById('sort-selection').value });
        return params;
    }

    function apply() {
        let pageSize = document.getElementById('pageSize-selection').value;
        getPaginatorPartial(1, pageSize, getProductGridPartial);
    }

    function getCategories() {
        let checkeds = [];
        let a = document.getElementsByName('categories');
        for (let el of a)
            if (el.checked)
                checkeds.push(el.value);

        if (checkeds.length > 0) {
            let value = checkeds[0];
            for (let i = 1; i < checkeds.length; i++)
                value += `,${checkeds[i]}`;
            return value;
        }
        else
            return null;
    }
</script>